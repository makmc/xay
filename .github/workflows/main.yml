# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]
  schedule:
    - cron:  '0 19 * * 4'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v3
    - name: clean
      run: |
        echo "clean"
        # NOTE: ls on macosx does not support long names of keys, e.g. --almost-all
        for f in $(ls -A); do
          rm -rf $f
        done
      shell: bash
    - name: clone repo
      run: |
        # On github public runners the current directory is owned by some other user.
        # To avoid git unsafe repository error, add current directory as a safe one to git config.
        git config --global --add safe.directory $(pwd)
        
        echo "clone"
        git clone --quiet https://${{ github.token }}@github.com/${{ github.repository }} .
        
        ref_type=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/([^/]*)\/.*$/\1/p')
        ref=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/[^/]*\/(.*)$/\1/p')

        echo "ref = $ref"
        echo "ref_type = $ref_type"

        case $ref_type in
          pull)
            echo "ref is a pull request, fetch it"
            git fetch origin +refs/pull/$ref:refs/remotes/origin/pull/$ref
            ref="origin/pull/$ref"
            ;;
          *)
            echo "use commit sha as ref"
            ref=${{ github.sha }}
            ;;
        esac

        echo "checkout $ref"
        git checkout $ref

        #if [ "${{ inputs.submodules }}" == "true" ] && [ -f ".gitmodules" ]; then
          #echo "clone submodules"
          # replace ssh to https in .gitmodules
          # NOTE: $ in front of sed's expression string is needed to make macosx treat \t as tab characters, then also \1 needs to be \\1
          #sed -E -i -e $'s/^[ \t]*url[ \t]*=[ \t]*git@github.com:([^\/]*\/[^\/]*)[ \t]*$/\turl = https:\/\/${{ github.token }}@github.com\/\\1/g' .gitmodules
          #git submodule init
          #git submodule update --recursive
        #fi
      shell: bash
      # Runs a single command using the runners shell
    # - name: Run a one-line script
      # run: echo Hello, world!

      # Runs a set of commands using the runners shell
    # - name: Run a multi-line script
      # run: |
        # echo Add other actions to build,
        # echo test, and deploy your project.
    - name: checkout repo
      uses: ./.github/checkout-repo
    #- run: openssl rand -base64 32
    #- uses: ./.github/heroku-build
      #with:
          #app-name: "${{secrets.APP}}"
          #api-key: "${{secrets.KEY}}"
          #path: "optional-path-of-build-to-deploy"
    - name: heroku build
      run: |
        mkdir -p ${{ runner.temp }}/heroku-build && chmod -R 770 ${{ runner.temp }}/heroku-build
        tar --warning=no-file-changed -czf ${{ runner.temp }}/heroku-build/release.tgz --exclude .git .
        sources=`curl -X POST https://api.heroku.com/apps/${{secrets.APP}}/sources -H 'Accept: application/vnd.heroku+json; version=3' -H 'Authorization: Bearer ${{secrets.KEY}}'`
        get_url=`echo $(jq -r '.source_blob.get_url' <<< "$sources")`
        put_url=`echo $(jq -r '.source_blob.put_url' <<< "$sources")`
        curl $put_url -X PUT -H "Content-Type:" -H "Accept: application/vnd.heroku+json; version=3" --data-binary @${{ runner.temp }}/heroku-build/release.tgz
        curl -X POST https://api.heroku.com/apps/${{secrets.APP}}/builds -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{secrets.KEY}}' -H 'Accept: application/vnd.heroku+json; version=3' -d "{\"source_blob\":{\"url\":\"$get_url\",\"version\":\"`git rev-parse HEAD`\"}}"
      shell: bash

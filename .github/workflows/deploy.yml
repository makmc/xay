name: Deploy

on:

  workflow_dispatch:

jobs:
  clean:
    runs-on: ubuntu-latest
    env:
       GITHUB_TOKEN:  ${{ secrets.PAT }}
       TARGET_REPOSITORY: ${{ secrets.TR }}
    steps:
      - name: clone
        run: |
          target_dir=${TARGET_REPOSITORY##*/}
          git clone https://github.com/${TARGET_REPOSITORY}.git
          cd "${target_dir}"
          rm -rf HK
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "$(date "+%Y%m%d-%H%M")"
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${TARGET_REPOSITORY}.git --force

  sync:
    runs-on: ubuntu-latest
    env:
       GITHUB_TOKEN:  ${{ secrets.PAT }}
       TARGET_REPOSITORY: ${{ secrets.TR }}
       UPSTREAM_REPOSITORY: ${{ secrets.HKDP }}
    needs: clean
    steps:
      - name: clone
        run: |
          target_dir=${TARGET_REPOSITORY##*/}
          git clone https://github.com/${TARGET_REPOSITORY}.git
          cd "${target_dir}"
          mkdir HK
          git clone https://github.com/${UPSTREAM_REPOSITORY}.git tmp
          mv tmp/* HK/
          rm -rf tmp
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "$(date "+%Y%m%d-%H%M")"
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${TARGET_REPOSITORY}.git --force

  checkout-deploy:
    runs-on: ubuntu-latest
    needs: [clean,sync]
    steps:
    - name: clean
      run: |
        echo "clean"
        # NOTE: ls on macosx does not support long names of keys, e.g. --almost-all
        for f in $(ls -A); do
          rm -rf $f
        done
      shell: bash
    - name: clone
      run: |
        # On github public runners the current directory is owned by some other user.
        # To avoid git unsafe repository error, add current directory as a safe one to git config.
        git config --global --add safe.directory $(pwd)
        
        echo "clone"
        git clone --quiet https://${{ github.token }}@github.com/${{ github.repository }} .
        
        ref_type=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/([^/]*)\/.*$/\1/p')
        ref=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/[^/]*\/(.*)$/\1/p')

        echo "ref = $ref"
        echo "ref_type = $ref_type"

        case $ref_type in
          pull)
            echo "ref is a pull request, fetch it"
            git fetch origin +refs/pull/$ref:refs/remotes/origin/pull/$ref
            ref="origin/pull/$ref"
            ;;
          *)
            echo "use commit sha as ref"
            ref=${{ github.sha }}
            ;;
        esac

        echo "checkout $ref"
        git checkout $ref

        #if [ "${{ inputs.submodules }}" == "true" ] && [ -f ".gitmodules" ]; then
          #echo "clone submodules"
          # replace ssh to https in .gitmodules
          # NOTE: $ in front of sed's expression string is needed to make macosx treat \t as tab characters, then also \1 needs to be \\1
          #sed -E -i -e $'s/^[ \t]*url[ \t]*=[ \t]*git@github.com:([^\/]*\/[^\/]*)[ \t]*$/\turl = https:\/\/${{ github.token }}@github.com\/\\1/g' .gitmodules
          #git submodule init
          #git submodule update --recursive
        #fi
      shell: bash
    - name: checkout-repo
      uses: ./.github/checkout-repo
    #- run: openssl rand -base64 32
    #- name: heroku-build
      #uses: ./.github/heroku-build
      #with:
          #app-name: "${{secrets.APP}}"
          #api-key: "${{secrets.KEY}}"
          #path: "optional-path-of-build-to-deploy"
    #- name: deploy
      #run: |
        #mkdir -p ${{ runner.temp }}/heroku-build && chmod -R 770 ${{ runner.temp }}/heroku-build
        #tar --warning=no-file-changed -czf ${{ runner.temp }}/heroku-build/release.tgz --exclude .git .
        #sources=`curl -X POST https://api.heroku.com/apps/${{secrets.APP}}/sources -H 'Accept: application/vnd.heroku+json; version=3' -H 'Authorization: Bearer ${{secrets.KEY}}'`
        #get_url=`echo $(jq -r '.source_blob.get_url' <<< "$sources")`
        #put_url=`echo $(jq -r '.source_blob.put_url' <<< "$sources")`
        #curl $put_url -X PUT -H "Content-Type:" -H "Accept: application/vnd.heroku+json; version=3" --data-binary @${{ runner.temp }}/heroku-build/release.tgz
        #curl -X POST https://api.heroku.com/apps/${{secrets.APP}}/builds -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{secrets.KEY}}' -H 'Accept: application/vnd.heroku+json; version=3' -d "{\"source_blob\":{\"url\":\"$get_url\",\"version\":\"`git rev-parse HEAD`\"}}"
      #shell: bash
    - name: heroku-deploy
      uses: ./HK
      with:
        heroku_api_key: ${{ secrets.KEY }}
        heroku_app_name: ${{ secrets.APP }}
        heroku_email: ${{ secrets.MAIL }}
